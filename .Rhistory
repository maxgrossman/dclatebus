# list of packages used in script
packages <- c( "jsonlite", "RPostgreSQL" )
# coerce response from installed.packages() to be clean data.frame of packages installed
packages_installed <- as.data.frame( installed.packages()[,c(1,3:4)] )
# remove rownames
rownames( packages_installed ) <- NULL
# use null value found in $Priority, this signifies already being downloaded
packages_installed <- packages_installed[is.na(
packages_installed$Priority),
1:2,drop=FALSE]
# get true/false index of packages on computer. true here is NOT INSTALLED
packages_index <- packages[!packages %in% as.character(packages_installed$Package)]
# if packages_index length greater than 1, install the packages in _packages_index
if (identical( packages_index, character(0) )) {
} else { install.packages( packages_index ) }
for(package in packages) {
library( package, character.only = TRUE)
}
key <- readline( prompt = "Provide API Key: ")
wmata_routes <- fromJSON( txt = system( paste(
'curl -v -X GET "https://api.wmata.com/Bus.svc/json/jRoutes" -H "api_key: ',
key,' "', sep = "" ) , intern=TRUE ))
wmata_routes
wmata_routes$Routes$RouteID
wmata_stops <- fromJSON( txt = system( paste(
'curl -v -X GET "https://api.wmata.com/Bus.svc/json/jStops" -H "api_key: ',
key,' "', sep = "" ) , intern=TRUE ))
# use list of route names to get list of route details for each route
route_names <- wmata_routes$Routes$RouteID
# initialize empty list to be filled below
wmata_routes_lst <- list()
# loop through all routes, api call for each, extend wmata_routes_lst with output
for( route in route_names ) {
wmata_route <- fromJSON( txt = system( paste(
'curl -v -X GET "https://api.wmata.com/Bus.svc/json/jRouteDetails?RouteID=',
route, '"',' -H "api_key: ', key,' "', sep = "" ) , intern=TRUE ))
wmata_routes_lst[[ length( wmata_routes_lst ) + 1L ]] <- wmata_route
}
wmata_routes_lst[[1]]$Direction0$DirectionText
dir0_wmata_routes <- wmata_routes_lst[ !sapply(
seq_along( wmata_routes_lst ),
function(i)
{
# an if else statement to return index of
# items in for those routes with stop geometry objects that aren't null
if(is.null(wmata_routes_lst[[i]]$Direction0$Stops)) {
} else if(length(wmata_routes_lst[[i]]$Direction0$Stops)>1) {i}
}) %in% "NULL" ]
# same as above for dir1
dir1_wmata_routes <- wmata_routes_lst[ !sapply(
seq_along( wmata_routes_lst ),
function(i)
{
# an if else statement to return index of
# items in for those routes with stop geometry objects that aren't null
if(is.null(wmata_routes_lst[[i]]$Direction1$Stops)) {
} else if(length(wmata_routes_lst[[i]]$Direction1$Stops)>1) {i}
}) %in% "NULL" ]
# make list of these two direction lists, we'll use this for a loop later on.
dir1_wmata_routes[[1]][1]
dir1_wmata_routes[[1]][1]+dir1_wmata_routes[[1]][2]
dir1_wmata_routes[[1]]$Direction1$DirectionText
dir1_wmata_routes[[2]]$Direction1$DirectionText
dir1_wmata_routes[[3]]$Direction1$DirectionText
dir1_wmata_routes[[4]]$Direction1$DirectionText
dir1_wmata_routes[[5]]$Direction1$DirectionText
dir1_wmata_routes[[6]]$Direction1$DirectionText
dir1_wmata_routes[[7]]$Direction1$DirectionText
dir1_wmata_routes[[8]]$Direction1$DirectionText
dir1_wmata_routes[[9]]$Direction1$DirectionText
dir1_wmata_routes[[10]]$Direction1$DirectionText
packages <- c( "jsonlite", "RPostgreSQL" )
packages_installed <- as.data.frame( installed.packages()[,c(1,3:4)] )
rownames( packages_installed ) <- NULL
packages_installed <- packages_installed[is.na(
packages_installed$Priority),
1:2,drop=FALSE]
packages_index <- packages[!packages %in% as.character(packages_installed$Package)]
if (identical( packages_index, character(0) )) {
} else { install.packages( packages_index ) }
for(package in packages) {
library( package, character.only = TRUE)
}
database_name <- readline( prompt = "Provide name of database to create: ")
drv <- dbDriver("PostgreSQL")
connection <- dbConnect( drv = drv,
dbname = database_name,
host = "localhost",
port = 5432 )
postgis_query <- "CREATE EXTENSION postgis;"
dbSendQuery( connection, postgis_query)
dbSendQuery( connection, "CREATE SCHEMA dir0routes;")
dbSendQuery( connection, "CREATE SCHEMA dir1routes;")
key <- readline( prompt = "Provide API Key: ")
'curl -v -X GET "https://api.wmata.com/Bus.svc/json/jRoutes" -H "api_key: ',
key,' "', sep = "" ) , intern=TRUE ))
wmata_stops <- fromJSON( txt = system( paste(
'curl -v -X GET "https://api.wmata.com/Bus.svc/json/jStops" -H "api_key: ',
key,' "', sep = "" ) , intern=TRUE ))
route_names <- wmata_routes$Routes$RouteID
wmata_routes_lst <- list()
for( route in route_names ) {
wmata_route <- fromJSON( txt = system( paste(
'curl -v -X GET "https://api.wmata.com/Bus.svc/json/jRouteDetails?RouteID=',
route, '"',' -H "api_key: ', key,' "', sep = "" ) , intern=TRUE ))
wmata_routes_lst[[ length( wmata_routes_lst ) + 1L ]] <- wmata_route
}
key <- readline( prompt = "Provide API Key: ")
wmata_routes <- fromJSON( txt = system( paste(
'curl -v -X GET "https://api.wmata.com/Bus.svc/json/jRoutes" -H "api_key: ',
key,' "', sep = "" ) , intern=TRUE ))
wmata_stops <- fromJSON( txt = system( paste(
'curl -v -X GET "https://api.wmata.com/Bus.svc/json/jStops" -H "api_key: ',
key,' "', sep = "" ) , intern=TRUE ))
route_names <- wmata_routes$Routes$RouteID
wmata_routes_lst <- list()
for( route in route_names ) {
wmata_route <- fromJSON( txt = system( paste(
'curl -v -X GET "https://api.wmata.com/Bus.svc/json/jRouteDetails?RouteID=',
route, '"',' -H "api_key: ', key,' "', sep = "" ) , intern=TRUE ))
wmata_routes_lst[[ length( wmata_routes_lst ) + 1L ]] <- wmata_route
}
dir0_wmata_routes <- wmata_routes_lst[ !sapply(
seq_along( wmata_routes_lst ),
function(i)
{
# an if else statement to return index of
# items in for those routes with stop geometry objects that aren't null
if(is.null(wmata_routes_lst[[i]]$Direction0$Stops)) {
} else if(length(wmata_routes_lst[[i]]$Direction0$Stops)>1) {i}
}) %in% "NULL" ]
dir0_wmata_routes <- dir0_wmata_routes[ sapply(
seq_along( dir0_wmata_routes ),
# separate between those west and south directions, adding a '_w' or '_s'
# to end to one another
function(i)
{
if ( dir0_wmata_routes[[i]]$Direction0 == "WEST" ) {
dir0_wmata_routes[[i]]$RouteID = paste(dir0_wmata_routes[[i]]$RouteID,
"w",
sep="_")
} else if ( dir0_wmata_routes[[i]]$Direction0 == "SOUTH" ) {
dir0_wmata_routes[[i]]$RouteID = paste(dir0_wmata_routes[[i]]$RouteID,
"S",
sep="_")
}
})]
warnings()
dir0_wmata_routes[[1]]
dir0_wmata_routes[[1]]$RouteID
dir0_wmata_routes[[i]]$RouteID,
"w",
sep="_")
paste(dir0_wmata_routes[[i]]$RouteID,
"w",
sep="_")
paste(dir0_wmata_routes[[1]]$RouteID,
"w",
sep="_")
dir0_wmata_routes[[1]]$Direction0$DirectionText
dir0_wmata_routes[[1]]$Direction0$DirectionText
dir0_wmata_routes[[1]]$RouteID
dir0_wmata_routes[[1]]$Direction0$DirectionNum
dir0_wmata_routes <- wmata_routes_lst[ !sapply(
seq_along( wmata_routes_lst ),
function(i)
{
# an if else statement to return index of
# items in for those routes with stop geometry objects that aren't null
if(is.null(wmata_routes_lst[[i]]$Direction0$Stops)) {
} else if(length(wmata_routes_lst[[i]]$Direction0$Stops)>1) {i}
}) %in% "NULL" ]
dir0_wmata_routes <- dir0_wmata_routes[ sapply(
seq_along( dir0_wmata_routes ),
# separate between those west and south directions, adding a '_w' or '_s'
# to end to one another
function(i)
{
if ( dir0_wmata_routes[[i]]$Direction0$DirectionText == "EAST" ) {
dir0_wmata_routes[[i]]$RouteID = paste(dir0_wmata_routes[[i]]$RouteID,
"w",
sep="_")
} else if ( dir0_wmata_routes[[i]]$Direction0$DirectionText == "NORTH" ) {
dir0_wmata_routes[[i]]$RouteID = paste(dir0_wmata_routes[[i]]$RouteID,
"s",
sep="_")
}
})
]
type(wmata_routes_lst
)
typeof(wmata_routes_lst)
typeof(dir0_wmata_routes)
d
dir0_wmata_routes <- dir0_wmata_routes[[ sapply(
seq_along( dir0_wmata_routes ),
# separate between those west and south directions, adding a '_w' or '_s'
# to end to one another
function(i)
{
if ( dir0_wmata_routes[[i]]$Direction0$DirectionText == "EAST" ) {
dir0_wmata_routes[[i]]$RouteID = paste(dir0_wmata_routes[[i]]$RouteID,
"w",
sep="_")
} else if ( dir0_wmata_routes[[i]]$Direction0$DirectionText == "NORTH" ) {
dir0_wmata_routes[[i]]$RouteID = paste(dir0_wmata_routes[[i]]$RouteID,
"s",
sep="_")
}
})]]
i=1
dir0_wmata_routes[[i]]$Direction0$DirectionText
dir0_wmata_routes[[i]]$RouteID
dir0_wmata_routes[[i]]$Direction0$DirectionText
if
[]
if(dir0_wmata_routes[[i]]$Direction0$DirectionText=="NORTH"){print("y")}
dir0_wmata_routes <- dir0_wmata_routes[ sapply(
seq_along( dir0_wmata_routes ),
# separate between those west and south directions, adding a '_w' or '_s'
# to end to one another
function(i)
{
if ( dir0_wmata_routes[[i]]$Direction0$DirectionText == "EAST" ) {
dir0_wmata_routes[[i]]$RouteID = paste(dir0_wmata_routes[[i]]$RouteID,
"w",
sep="_")
} else if ( dir0_wmata_routes[[i]]$Direction0$DirectionText == "NORTH" ) {
dir0_wmata_routes[[i]]$RouteID = paste(dir0_wmata_routes[[i]]$RouteID,
"s",
sep="_")
}
})]
sapply(seq_along(dir0_wmata_routes)
)
sapply(seq_along(dir0_wmata_routes))
seq_along(dir0_wmata_routes)
sapply(seq_along(dir0_wmata_routes),print(x))
sapply(seq_along(dir0_wmata_routes),print(dir0_wmata_routes[[i]]$RouteID))
dir0_wmata_routes1 <- dir0_wmata_routes[ sapply(
seq_along( dir0_wmata_routes ),
# separate between those west and south directions, adding a '_w' or '_s'
# to end to one another
function(i)
{
if ( dir0_wmata_routes[[i]]$Direction0$DirectionText == "EAST" ) {i}
} else if ( dir0_wmata_routes[[i]]$Direction0$DirectionText == "NORTH" ) {}
) %in% "EAST"]
dir0_wmata_routes1 <- dir0_wmata_routes[ sapply(
seq_along( dir0_wmata_routes ),
# separate between those west and south directions, adding a '_w' or '_s'
# to end to one another
function(i)
{
if ( dir0_wmata_routes[[i]]$Direction0$DirectionText == "EAST" )
{i} else if ( dir0_wmata_routes[[i]]$Direction0$DirectionText == "NORTH" ) {}
}) %in% "EAST"]
dir0_wmata_routes1[[1]]
dir0_wmata_routes1[
dir0_wmata_routes1
dir0_wmata_routes1[]
dir0_wmata_routes1
dir0_wmata_routes1 <- dir0_wmata_routes[ !sapply(
seq_along( dir0_wmata_routes ),
# separate between those west and south directions, adding a '_w' or '_s'
# to end to one another
function(i)
{
if ( dir0_wmata_routes[[i]]$Direction0$DirectionText == "EAST" )
{i} else if ( dir0_wmata_routes[[i]]$Direction0$DirectionText == "NORTH" ) {}
}) %in% "EAST"]
dir0_wmata_routes1
dir0_wmata_routes1[[1]]$Direction0$DirectionText
dir0_wmata_routes1[[2]]$Direction0$DirectionText
dir0_wmata_routes1[[3]]$Direction0$DirectionText
dir0_wmata_routes1[[4]]$Direction0$DirectionText
dir0_wmata_routes1[[5]]$Direction0$DirectionText
dir0_wmata_routes1[[6]]$Direction0$DirectionText
dir0_wmata_routes1[[7]]$Direction0$DirectionText
dir0_wmata_routes1 <- dir0_wmata_routes[ !sapply(
seq_along( dir0_wmata_routes ),
# separate between those west and south directions, adding a '_w' or '_s'
# to end to one another
function(i)
{
if ( dir0_wmata_routes[[i]]$Direction0$DirectionText == "EAST" ) {i}
}) %in% "EAST"]
dir0_wmata_routes1[[1]]
dir0_wmata_routes1[[1]]$Direction0
dir0_wmata_routes1[[1]]$Direction0$DirectionText
dir0_wmata_routes1[[2]]$Direction0$DirectionText
dir0_wmata_routes1[[6]]$Direction0$DirectionText
dir0_wmata_routes1[[7]]$Direction0$DirectionText
dir0_wmata_routes1 <- dir0_wmata_routes[ !sapply(
seq_along( dir0_wmata_routes ),
# separate between those west and south directions, adding a '_w' or '_s'
# to end to one another
function(i)
{
if ( dir0_wmata_routes[[i]]$Direction0$DirectionText == "EAST" ) {i}
}) %in% "NORTH"]
dir0_wmata_routes1[[7]]$Direction0$DirectionText
