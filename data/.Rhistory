install.packages("RODBC")
library(RODBC)
?RODBC
??RODBC
packages_installed <- as.data.frame( installed.packages()[,c(1,3:4)] )
rownames( packages_installed ) <- NULL
packages_installed <- packages_installed[is.na(
packages._nstalled$Priority),
1:2,drop=FALSE]
packages_installed
install.packages(c('RPostgreSQL','rpostgis'))
library(RPostgreSQL)
library(rpostgis)
drv <- dbDriver("PostgreSQL")
system("creatdb wmata_test")
e
system("createdb wmata_test")
con <- dbConnect(drv, dbname = "wmata_test", host = "localhost")
dbListTables(con)
query <- "CREATE SCHEMA test;"
dbSendQuery( con, query )
query1 <- "COMMENT SCHEMA test IS 'SCHEMA for test purpose."
setwd("/Users/giscomputerextra2/Desktop/max/github/maxgrossman/dclatebus/data")
stops16E <- readOGR(".","16E_stops")
stops16E <- readORG(".","16E_stops")
library(rgdal)
s
stops16E <- readOGR(".","16E_stops")
?dbWriteTable
dbWriteTable(con, "test", stops16E)
?ld
?ld()
?dbWriteTable
?`dbWriteTable-methods`
?`dbWriteTable,PostgreSQLConnection,character,data.frame-method`
dbWriteTable(con, "test", stops16E@data)
packages <- c( "jsonlite", "rgdal", "rgeos",
"raster", "maptools", "devtools",
"RPostgreSQL", "rpostgis" )
packages_installed <- as.data.frame( installed.packages()[,c(1,3:4)] )
rownames( packages_installed ) <- NULL
packages_installed <- packages_installed[is.na(
packages._nstalled$Priority),
1:2,drop=FALSE]
packages_index <- packages[!packages %in% as.character(packages.installed$Package)]
if( packages_index < 1 ) {
install.packages(packages_index)
}
packages <- c( "jsonlite", "rgdal", "rgeos",
"raster", "maptools", "devtools",
"RPostgreSQL", "rpostgis" )
packages_installed <- as.data.frame( installed.packages()[,c(1,3:4)] )
rownames( packages_installed ) <- NULL
packages_installed <- packages_installed[is.na(
packages._nstalled$Priority),
1:2,drop=FALSE]
packages_index <- packages[!packages %in% as.character(packages.installed$Package)]
packages_index <- packages[!packages %in% as.character(packages_installed$Package)]
if( packages_index < 1 ) {
install.packages(packages_index)
}
n
if( packages_index < 1 ) {
install.packages(packages_index)
} else {}
if( packages_index < 1 ) {
install.packages(packages_index)
} else { }
if( packages_index < 1 ) {
install.packages(packages_index)
} else {
if( packages_index > 0) {
}
}
for(package in packages) {
library( package, character.only = TRUE)
}
key<-readline( prompt = "Provide API Key: ")
wmata_routes <- fromJSON( txt = system( paste(
'curl -v -X GET "https://api.wmata.com/Bus.svc/json/jRoutes" -H "api_key: ',
key,' "', sep = "" ) , intern=TRUE ))
wmata_stops <- fromJSON( txt = system( paste(
'curl -v -X GET "https://api.wmata.com/Bus.svc/json/jStops" -H "api_key: ',
key,' "', sep = "" ) , intern=TRUE ))
wmata_stops$Stops$StopID
dbSendQuery(con, paste("CREATE TEMP TABLE stops_tmp",
"(stop.id text PRIMARY KEY,",
"stop.nam text, geom geometry)"))
dbSendQuery(con, paste("CREATE TEMP TABLE stops_tmp",
"(stop_id text PRIMARY KEY,",
"stop_nam text, geom geometry)"))
dbSendQuery(con, paste("CREATE TEMP TABLE stops_tmp",
"(stop_id text PRIMARY KEY,",
"stop_nam text, geom geometry)"))
?postgis_insert
postgis_insert
install.packages("postGIStools")
library(postGIStools)
postgis_update(con, stops16E, "stops_tmp",
write_cols = c("stop_id" , "stop_nam"),
geom_name = "geom")
postgis_update(con, stops16E, "stops_tmp",
write_cols = c("stop_id", "stop_nam"),
geom_name = "geom")
postgis_update(con, stops16E, "stops_tmp")
dbSendQuery(con, paste("CREATE TEMP TABLE stops_tmp" ,
"(stop_id text PRIMARY KEY,",
"stop_nam text, geom geometry)"))
postgis_update(con, stops16E, "stops_tmp",
write_cols = c("stop_id", "stop_nam"),
geom_name = "geom")
postgis_update(con, stops16E, "stops_tmp",
update_cols = c("stop_id", "stop_nam"),
geom_name = "geom")
postgis_insert(con, stops16E, "stops_tmp",
write_cols = c("stop_id", "stop_nam"),
geom_name = "geom")
grep(wmata_routes$Routes$RouteID[[1]], wmata_stops$Stops$Routes)
routes_index <- grep(wmata_routes$Routes$RouteID[[1]], wmata_stops$Stops$Routes)
stops_id <- wmata_stops$Stops$StopID[ route_index ]
route_index <- routes_index
stops_id <- wmata_stops$Stops$StopID[ route_index ]
stops_nam <- wmata_stops$Stops$Name[ routes_index ]
stops_loc <- SpatialPoints( cbind( wmata_stops$Stops$Lon[ routes_index],
wmata_stops$Stops$Lat[ routes_index] ),
CRS("+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs")
)
stops_df <- data.frame( stop_id = stops_id,
nam = stops_nam )
stops_spdf <- SpatialPointsDataFrame( stops_loc, data = stops_df )
postgis_insert(con, stops16E, "stops_tmp",
write_cols = c("stop_id", "nam"),
geom_name = "geom")
stops_df
postgis_insert(con, stops16E, "stops_tmp",
write_cols = c("stop_id", "nam"),
geom_name = "geom")
postgis_insert(con, stops16E, "stops_tmp",
write_cols = c("nam"),
geom_name = "geom")
stops_df <- data.frame( stops_id = stops_id,
nam = stops_nam )
stops_spdf <- SpatialPointsDataFrame( stops_loc, data = stops_df )
stops_df <- data.frame( stop_id = stops_id,
nam = stops_nam )
stops_spdf <- SpatialPointsDataFrame( stops_loc, data = stops_df )
postgis_insert(con, stops_spdf, "stops_tmp",
write_cols = c("stop_id", "nam"),
geom_name = "geom")
stops_df <- data.frame( stop_id = stops_id,
stop_nam = stops_nam )
stops_spdf <- SpatialPointsDataFrame( stops_loc, data = stops_df )
postgis_insert(con, stops_spdf, "stops_tmp",
write_cols = c("stop_id", "stop_nam"),
geom_name = "geom")
postgis_update(con, stops_spdf, "stops_tmp",
write_cols = c("stop_id", "stop_nam"),
geom_name = "geom")
dbSendQuery(con, paste("CREATE TEMP TABLE stops_tmp" ,
"(stop_id text PRIMARY KEY,",
"stop_nam text, geom geometry)"))
